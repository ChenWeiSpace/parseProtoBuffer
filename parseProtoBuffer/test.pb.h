// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_test_2eproto();
namespace tutorial {
class Student;
class StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class StudentLeader;
class StudentLeaderDefaultTypeInternal;
extern StudentLeaderDefaultTypeInternal _StudentLeader_default_instance_;
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> ::tutorial::Student* Arena::CreateMaybeMessage<::tutorial::Student>(Arena*);
template<> ::tutorial::StudentLeader* Arena::CreateMaybeMessage<::tutorial::StudentLeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tutorial {

// ===================================================================

class StudentLeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.StudentLeader) */ {
 public:
  StudentLeader();
  virtual ~StudentLeader();

  StudentLeader(const StudentLeader& from);

  inline StudentLeader& operator=(const StudentLeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StudentLeader(StudentLeader&& from) noexcept
    : StudentLeader() {
    *this = ::std::move(from);
  }

  inline StudentLeader& operator=(StudentLeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StudentLeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudentLeader* internal_default_instance() {
    return reinterpret_cast<const StudentLeader*>(
               &_StudentLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StudentLeader* other);
  friend void swap(StudentLeader& a, StudentLeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StudentLeader* New() const final {
    return CreateMaybeMessage<StudentLeader>(NULL);
  }

  StudentLeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StudentLeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StudentLeader& from);
  void MergeFrom(const StudentLeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentLeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 age = 1;
  void clear_age();
  static const int kAgeFieldNumber = 1;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.StudentLeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 age_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Student : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Student) */ {
 public:
  Student();
  virtual ~Student();

  Student(const Student& from);

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(Student&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Student& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Student* other);
  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Student* New() const final {
    return CreateMaybeMessage<Student>(NULL);
  }

  Student* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tutorial.StudentLeader maths = 2;
  int maths_size() const;
  void clear_maths();
  static const int kMathsFieldNumber = 2;
  ::tutorial::StudentLeader* mutable_maths(int index);
  ::google::protobuf::RepeatedPtrField< ::tutorial::StudentLeader >*
      mutable_maths();
  const ::tutorial::StudentLeader& maths(int index) const;
  ::tutorial::StudentLeader* add_maths();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::StudentLeader >&
      maths() const;

  // repeated int32 ssd = 4;
  int ssd_size() const;
  void clear_ssd();
  static const int kSsdFieldNumber = 4;
  ::google::protobuf::int32 ssd(int index) const;
  void set_ssd(int index, ::google::protobuf::int32 value);
  void add_ssd(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ssd() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ssd();

  // repeated string tyName = 5;
  int tyname_size() const;
  void clear_tyname();
  static const int kTyNameFieldNumber = 5;
  const ::std::string& tyname(int index) const;
  ::std::string* mutable_tyname(int index);
  void set_tyname(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tyname(int index, ::std::string&& value);
  #endif
  void set_tyname(int index, const char* value);
  void set_tyname(int index, const char* value, size_t size);
  ::std::string* add_tyname();
  void add_tyname(const ::std::string& value);
  #if LANG_CXX11
  void add_tyname(::std::string&& value);
  #endif
  void add_tyname(const char* value);
  void add_tyname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tyname() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tyname();

  // bytes age = 3;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  const ::std::string& age() const;
  void set_age(const ::std::string& value);
  #if LANG_CXX11
  void set_age(::std::string&& value);
  #endif
  void set_age(const char* value);
  void set_age(const void* value, size_t size);
  ::std::string* mutable_age();
  ::std::string* release_age();
  void set_allocated_age(::std::string* age);

  // .tutorial.StudentLeader math = 1;
  bool has_math() const;
  void clear_math();
  static const int kMathFieldNumber = 1;
  const ::tutorial::StudentLeader& math() const;
  ::tutorial::StudentLeader* release_math();
  ::tutorial::StudentLeader* mutable_math();
  void set_allocated_math(::tutorial::StudentLeader* math);

  // @@protoc_insertion_point(class_scope:tutorial.Student)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::StudentLeader > maths_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ssd_;
  mutable std::atomic<int> _ssd_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> tyname_;
  ::google::protobuf::internal::ArenaStringPtr age_;
  ::tutorial::StudentLeader* math_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StudentLeader

// int32 age = 1;
inline void StudentLeader::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 StudentLeader::age() const {
  // @@protoc_insertion_point(field_get:tutorial.StudentLeader.age)
  return age_;
}
inline void StudentLeader::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:tutorial.StudentLeader.age)
}

// -------------------------------------------------------------------

// Student

// .tutorial.StudentLeader math = 1;
inline bool Student::has_math() const {
  return this != internal_default_instance() && math_ != NULL;
}
inline void Student::clear_math() {
  if (GetArenaNoVirtual() == NULL && math_ != NULL) {
    delete math_;
  }
  math_ = NULL;
}
inline const ::tutorial::StudentLeader& Student::math() const {
  const ::tutorial::StudentLeader* p = math_;
  // @@protoc_insertion_point(field_get:tutorial.Student.math)
  return p != NULL ? *p : *reinterpret_cast<const ::tutorial::StudentLeader*>(
      &::tutorial::_StudentLeader_default_instance_);
}
inline ::tutorial::StudentLeader* Student::release_math() {
  // @@protoc_insertion_point(field_release:tutorial.Student.math)
  
  ::tutorial::StudentLeader* temp = math_;
  math_ = NULL;
  return temp;
}
inline ::tutorial::StudentLeader* Student::mutable_math() {
  
  if (math_ == NULL) {
    auto* p = CreateMaybeMessage<::tutorial::StudentLeader>(GetArenaNoVirtual());
    math_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Student.math)
  return math_;
}
inline void Student::set_allocated_math(::tutorial::StudentLeader* math) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete math_;
  }
  if (math) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      math = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, math, submessage_arena);
    }
    
  } else {
    
  }
  math_ = math;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Student.math)
}

// repeated .tutorial.StudentLeader maths = 2;
inline int Student::maths_size() const {
  return maths_.size();
}
inline void Student::clear_maths() {
  maths_.Clear();
}
inline ::tutorial::StudentLeader* Student::mutable_maths(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Student.maths)
  return maths_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::StudentLeader >*
Student::mutable_maths() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Student.maths)
  return &maths_;
}
inline const ::tutorial::StudentLeader& Student::maths(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Student.maths)
  return maths_.Get(index);
}
inline ::tutorial::StudentLeader* Student::add_maths() {
  // @@protoc_insertion_point(field_add:tutorial.Student.maths)
  return maths_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::StudentLeader >&
Student::maths() const {
  // @@protoc_insertion_point(field_list:tutorial.Student.maths)
  return maths_;
}

// bytes age = 3;
inline void Student::clear_age() {
  age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Student::age() const {
  // @@protoc_insertion_point(field_get:tutorial.Student.age)
  return age_.GetNoArena();
}
inline void Student::set_age(const ::std::string& value) {
  
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Student.age)
}
#if LANG_CXX11
inline void Student::set_age(::std::string&& value) {
  
  age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Student.age)
}
#endif
inline void Student::set_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Student.age)
}
inline void Student::set_age(const void* value, size_t size) {
  
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Student.age)
}
inline ::std::string* Student::mutable_age() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Student.age)
  return age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Student::release_age() {
  // @@protoc_insertion_point(field_release:tutorial.Student.age)
  
  return age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Student::set_allocated_age(::std::string* age) {
  if (age != NULL) {
    
  } else {
    
  }
  age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), age);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Student.age)
}

// repeated int32 ssd = 4;
inline int Student::ssd_size() const {
  return ssd_.size();
}
inline void Student::clear_ssd() {
  ssd_.Clear();
}
inline ::google::protobuf::int32 Student::ssd(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Student.ssd)
  return ssd_.Get(index);
}
inline void Student::set_ssd(int index, ::google::protobuf::int32 value) {
  ssd_.Set(index, value);
  // @@protoc_insertion_point(field_set:tutorial.Student.ssd)
}
inline void Student::add_ssd(::google::protobuf::int32 value) {
  ssd_.Add(value);
  // @@protoc_insertion_point(field_add:tutorial.Student.ssd)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Student::ssd() const {
  // @@protoc_insertion_point(field_list:tutorial.Student.ssd)
  return ssd_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Student::mutable_ssd() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Student.ssd)
  return &ssd_;
}

// repeated string tyName = 5;
inline int Student::tyname_size() const {
  return tyname_.size();
}
inline void Student::clear_tyname() {
  tyname_.Clear();
}
inline const ::std::string& Student::tyname(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Student.tyName)
  return tyname_.Get(index);
}
inline ::std::string* Student::mutable_tyname(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Student.tyName)
  return tyname_.Mutable(index);
}
inline void Student::set_tyname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tutorial.Student.tyName)
  tyname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Student::set_tyname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tutorial.Student.tyName)
  tyname_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Student::set_tyname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tyname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tutorial.Student.tyName)
}
inline void Student::set_tyname(int index, const char* value, size_t size) {
  tyname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tutorial.Student.tyName)
}
inline ::std::string* Student::add_tyname() {
  // @@protoc_insertion_point(field_add_mutable:tutorial.Student.tyName)
  return tyname_.Add();
}
inline void Student::add_tyname(const ::std::string& value) {
  tyname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tutorial.Student.tyName)
}
#if LANG_CXX11
inline void Student::add_tyname(::std::string&& value) {
  tyname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tutorial.Student.tyName)
}
#endif
inline void Student::add_tyname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tyname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tutorial.Student.tyName)
}
inline void Student::add_tyname(const char* value, size_t size) {
  tyname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tutorial.Student.tyName)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Student::tyname() const {
  // @@protoc_insertion_point(field_list:tutorial.Student.tyName)
  return tyname_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Student::mutable_tyname() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Student.tyName)
  return &tyname_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_test_2eproto
